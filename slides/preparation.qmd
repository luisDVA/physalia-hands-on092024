---
title: "Data preparation"
author: Luis D. Verde Arregoitia
format:
  revealjs:
    theme: course_styles.scss
    chalkboard: true
    transition: fade
    progress: true
    preview-links: true
    hide-inactive-cursor: true
    highlight-style: printing
    pause: true
editor: source
knitr:
  opts_chunk:
    dev: "ragg_png"
    retina: 3
    dpi: 200
execute:
  freeze: auto
  cache: true
  echo: true
  fig-width: 5
  fig-height: 6
---

```{r setup}
#| echo: false
#| message: false
#| warning: false

library(janitor)
library(tidyr)
library(stringr)
library(dplyr)
library(gt)
```

### Today:

-   The `tidyverse`\  
-   pipes
-   Data organization\
-   Tidy data principles
-   tools for data wrangling\
-   Subsetting and pivoting data

## tidyverse

::: columns
::: {.column width="20%"}
![](imgs/tidyverse_celestial.png)
:::

::: {.column width="80%"}
> ... an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures. Its primary goal is to facilitate a conversation between a human and a computer about data ...
:::
:::

::::{.rightref}
:::{.refbox}
Wickham et al. (2019)\
[Welcome to the tidyverse](https://www.theoj.org/joss-papers/joss.01686/10.21105.joss.01686.pdf)\
https://www.tidyverse.org/
:::
::::

## tidyverse

- For the repeated tasks in of nearly every project: data import, tidying, manipulation, visualization, and programming


- Designed for easier engagement with additional pieces of the larger ecosystem

::::{.rightref}
:::{.refbox}
√áetinkaya-Rundel et al. ([2021](https://arxiv.org/abs/2108.03510))\
An educator's perspective of the tidyverse
:::
::::

## Pipes 

To perform multiple operations in sequence:

::: incremental

-   Nested code (results evaluated from the inside out)

-   Intermediate objects (assign objects with intermediate results and pass on to the next function in a sequence)

-   Pipes (structure sequential operations left-to-right)

:::

## Nested code
</br>

:::{.med-code}
```{r}
#| eval: true
#| echo: true

scores <- c(7,8,8,10,6,9,5,9,8)

round(mean(scores), digits = 2)
```
:::

## Intermediate objects

</br>

:::{.med-code}
```{r}
#| eval: true
#| echo: true
mn_scrs <- mean(scores)

round(mn_scrs, digits = 2)

```
:::

## Pipes

::: fragment
::: columns
::: {.column width="30%"}
Left Hand Side\
(LHS)
:::

::: {.column width="40%"}
`pipe operator`

`%>%` or  `|>` 

:::

::: {.column width="30%"}
Right Hand Side\
(RHS)
:::
:::
:::

</br>

::: fragment
Take an **object** on the **Left Hand Side** of the pipe and insert it into a **function** as an argument on the **Right Hand Side**

\* By default, **LHS** is placed as the **first** argument in the call
:::

## Pipes

-   Minimize the need for intermediate objects and nested code

-   Make code readable

-   Easy to add or remove steps

> Insert with `ctrl + shift + M`

::: {style="text-align: right"}
Adolfo √Ålvarez (2021)\
[The (updated) history of the pipe operator in R](http://adolfoalvarez.cl/blog/2021-09-16-plumbers-chains-and-famous-painters-the-history-of-the-pipe-operator-in-r/)
:::

##

::: {.big-code}
```{r}
#| echo: true
library(magrittr)
scores %>% 
  mean() %>% 
  round(digits=2)
```
:::

::: {.big-code}
```{r}
#| echo: true
scores %>% 
  mean %>% 
  round(digits=2)
```
:::


##
</br>

::: {style="text-align: center"}
`LHS |> RHS(argument = 12)`

*becomes*

`RHS(LHS, argument = 12)`
:::


## tibbles 

A modern implementation of `data.frames`  

Implemented across the `tidyverse` through üì¶  `tibble`

:::{.med-code}
```{r}
tibble(
  x = c("a", "b", "c"),
  y = c(1, 2, 3)
)
```
:::




##

tibbles are the shared rectangular data object for all `tidyverse` packages. However:

::: {.incremental}
-  `data.frame` in ‚û°Ô∏è  `data.frame` out  


-  `tibble` in ‚û°Ô∏è  `tibble` out  


- create a new object ‚û°Ô∏è  `tibble` out

:::

## Creating tibbles

- Default function outputs

- Coerce other objects with `as_tibble()`

- Build from scratch with `tibble()`

## tibbles

To avoid ambiguity:


:::{.incremental}
- No row names 

- Variable names untouched

- Character columns not treated as factors  

- Complete variable names needed for subsetting with `$`

:::

## Indexing and subsetting with `$`

:::{.med-code}
```{r}
#| eval: true
#| error: true
my_df <- data.frame(letters=c("A","B","C"),
                 numbers=c(4,5,6))
my_df$let
my_tib <- tibble(letters=c("A","B","C"),
                 numbers=c(4,5,6))
my_tib$let
my_tib$letters 
```
:::

## tibble printing

For brevity, _tibbles_ printed on the console show:

:::{.incremental}
- First 10 rows 

- How many rows and columns are not shown

- As many columns as can fit on the console width

- Variable types 

- Rounding and highlighting for numeric variables

:::


# Data organization

## What's wrong with these data? {background-color="#a4c5ff"}

![](imgs/wordData.png)


## A more usable format

```{r}
#| echo: false
tibble::tribble(
            ~Name,     ~Role, ~Year,    ~Travel.Type, ~Trip.Purpose, ~Cost, ~Country,
  "Jane Michaels",      "PI", 2019L,      "National",  "Field Work", 1000L,     "UK",
  "Jane Michaels",      "PI", 2019L,      "National",  "Field Work", 2000L,     "UK",
  "Jane Michaels",      "PI", 2019L,      "National",  "Conference", 1000L,     "UK",
  "Jane Michaels",      "PI", 2019L,      "National",    "Workshop", 1000L,     "UK",
  "Jane Michaels",      "PI", 2019L, "International",  "Conference", 3000L,    "USA",
         "Raul J", "Student", 2019L,      "National",  "Field Work",    0L,     "UK"
  )

```

## Well-organized data

-   Easier to import and manipulate

-   Less prone to (non-replicable) errors

    -   omission
    -   alteration
    -   duplication

Good data organization helps us when we produce data, and also to identify and solve problems in existing data

::::{.rightref}
:::{.refbox}
Chapter 3. Data Organization  
[Data Management in Research](https://datamgmtinedresearch.com/structure)  
Crystal Lewis
:::
::::

## Data Organization best practices

-   Consistency in names, layouts, abbreviations, units, etc.

-   Good names

-   Rectangular layouts

::::{.rightref}
:::{.refbox}

::: columns
::: {.column width="33%"}
Openscapes (2020)\
[Tidy data illustrated](https://www.openscapes.org/blog/2020/10/12/tidy-data/)
:::

::: {.column width="33%"}
Broman and Woo (2018)\
[Organizing data in spreadsheets](https://doi.org/10.1080/00031305.2017.1375989)
:::

::: {.column width="33%"}
Verde Arregoita et al. (2018)\
[Good practices for sharing analysis-ready data...](https://doi.org/10.4404/hystrix-00133-2018)
:::
:::
:::
::::

## Consistency

![](imgs/consistency.png)

Find the inconsistencies

## Data rectangles


![Data Organization - Crystal Lewis](imgs/fig3-3rectangle.PNG)


-   Each row has the same number of columns

-   Each column has the same number of rows


Equal-height columns give a rectangular shape to the data frame


## 

::: columns
::: {.column width="65%"}
![](imgs/cashflow.png){width="64%"}


:::

::: {.column width="35%"}
Davis Vaughan (2018)\
[Tidying Excel cash flow spreadsheets](https://blog.davisvaughan.com/2018/02/16/tidying-excel-cash-flow-spreadsheets-in-r/)
:::
:::


# Tidy data and data rectangling

## Ready for immediate use?

-   Subset, group, transform, sort, visualize, model, share

![R4DS 2nd ed](imgs/r4dscomm.png){fig-align="center"}

## Not ready?

-   Restructure for easier and more effective handling


## Tidy data

An accessible reformulation of existing principles and definitions from statistics and computer science, to ultimately help us structure our data for usability.

</br>

::::{.rightref}
:::{.refbox}
Wickham (2014)\
[Tidy Data](https://www.jstatsoft.org/article/view/v059i10/) - Journal of Statistical Software
:::
::::

## Tidy data

-   Arranged in a 2D data matrix with rows and columns

-   Rows correspond to observations

-   Columns correspond to variables

-   One value per cell




::: {style="text-align: right"}
Wickham (2014)\
[Tidy Data](https://www.jstatsoft.org/article/view/v059i10/) - Journal of Statistical Software
:::

## 

![](imgs/varscols.png){width="90%"}


## 

![](imgs/tidydata.png)


## Why tidy?

Easy to reshape into other structures after cleaning or transforming

![](imgs/pivotingintro.gif)


## 

::: columns
::: {.column width="40%"}
![](imgs/tidyvarsmap.png)
:::

::: {.column width="60%"}
Variables feed directly into model specifications and plotting parameters.
:::
:::

## Why not

-   Tidy data is more repetitive, often takes up more space than other more condensed representations

-   Not ideal for data entry, or for tables that will be embedded in a text document

# Data organization quick tips


## Grouping information goes in its own variable

Use indicator variables instead of encoding information into an existing value.

![](imgs/indgroups.png)


## NA and Empty Values

Not recorded, not applicable, lost in transcription, etc.

</br> [Missing data are still data]{style="font-size: 1.5em; text-align: center"} </br>

In R we use [NA]{style="color:red; font-family: Liberation Mono; font-weight: bold"}, a special logical constant that denotes missing values

##

-   Code [NA]{style="color:red; font-family: Liberation Mono; font-weight: bold"} values consistently (if done consistently, blank cells are OK)

-   Avoid ambiguity

> Are data known to be missing, or was a value intentionally left blank?

-   Avoid empty cells as padding to align values, or for aesthetic or layout purposes.

-   Avoid [`NA`]{style="color:red"} values in column headers

## 


![](imgs/NAblank.png)


## Make reasonable headers (column names)

#### Uninformative names with inconsistent naming schemes

```{r}
#| echo: false
#| eval: true
useless <- tibble::tribble(
  ~X, ~X1, ~X2, ~min_Score, ~AVERAGE.SCORE,
  "UMN", "EAST", "A", 7.7, 7.701,
  "UV", "WEST", "B", 8.9, 8.89,
  "UNLV", "EAST", "C", 9.2, 9.199
)
useless %>%
  gt() %>%
  tab_style(
    cell_text(size = "25px"),
    locations = list(
      cells_body(),
      cells_column_labels(everything()),
      cells_title()
    )
  )
```

-   More difficult to remember and specify

-   Do not sort well

## Much better

```{r}
#| echo: false
#| eval: true

useless <- tibble::tribble(
  ~university, ~coast, ~division, ~min_score, ~avg_score,
  "UMN", "EAST", "A", 7.7, 7.701,
  "UV", "WEST", "B", 8.9, 8.89,
  "UNLV", "EAST", "C", 9.2, 9.199
)
useless %>%
  gt() %>%
  tab_style(
    cell_text(size = "25px"),
    locations = list(
      cells_body(),
      cells_column_labels(everything()),
      cells_title()
    )
  )
```

## Names broken across rows

::: columns
::: {.column width="50%"}
```{r}
#| echo: false
#| eval: true
  
tibble::tribble(
  ~X, ~X1, ~X2, ~min, ~AVERAGE,
  NA, NA, NA, "Score", "SCORE",
  "UMN", "EAST", "A", "7.7", "7.701",
  "UV", "WEST", "B", "8.9", "8.89",
  "UNLV", "EAST", "C", "9.2", "9.199"
) %>%
  gt() %>%
  tab_style(
    cell_text(size = "24px"),
    locations = list(
      cells_body(),
      cells_column_labels(everything()),
      cells_title()
    )
  )
```
:::

::: {.column width="50%"}
Variable names appear in \>1 rows

Header fragments mixed with data

Separators become implicit

`NAs` introduced
:::
:::

# Data sharing best practices

## Data can be intuitive, easy to read AND machine-readable if shared adequately

‚Üò Reduce the need for complex/proprietary software or advanced programming skills for inclusion in future analyses.

</br>

‚Üò Minimize the amount of interpretation needed to  use the data.


# Tools for data wrangling

## Functions and packages to prepare, transform, and reshape data

::: columns
::: {.column width="20%"}
üì¶ **`dplyr`**\
üì¶ **`tidyr`**
:::

::: {.column width="80%"}
Flexible and powerful

-   Failsafes against accidental misuse
-   Concise code
-   Shared grammar and data structures
-   Tasks split up across functions and packages
-   pipe-friendly
:::
:::

## Handy üì¶ `dplyr` functions

-   Intuitive, user-friendly functions for common data manipulation tasks:

    -   Subset columns

    -   Subset rows

    -   Create or modify columns

-   Each function does one only thing, but does it well
    
## 

```{r mdiv}
#| echo: false 
#| eval: true

mcountries <- 
tibble::tribble(
      ~cntry,   ~species, ~threatened,   ~region,
  "Indonesia",      670L,        191L,    "Asia",
     "Brasil",      648L,         80L, "America",
      "China",      551L,         73L,    "Asia",
     "Mexico",      523L,         96L, "America",
       "Peru",      467L,         53L, "America",
      "Congo",      430L,         15L,  "Africa",
      "India",      412L,         93L,    "Asia",
      "Kenya",      376L,         30L,  "Africa",
  "Argentina",      374L,         38L, "America",
    "Ecuador",      372L,         47L, "America",
  "Venezuela",      363L,         35L, "America",
   "Tanzania",      359L,         41L,  "Africa"
  )



```

::: panel-tabset
###  Megadiverse countries

```{r}
#| echo: false 
#| eval: true
mcountries %>% gt() %>% 
  tab_style(
    cell_text(size = '21px'),
    locations = list(cells_body(),
                     cells_column_labels(everything()),
                     cells_title()))
```

### Data

```{r}
#| echo: true
#| eval: false
mcountries <- 
tibble::tribble(
      ~cntry,   ~species, ~threatened,   ~region,
  "Indonesia",      670L,        191L,    "Asia",
     "Brasil",      648L,         80L, "America",
      "China",      551L,         73L,    "Asia",
     "Mexico",      523L,         96L, "America",
       "Peru",      467L,         53L, "America",
      "Congo",      430L,         15L,  "Africa",
      "India",      412L,         93L,    "Asia",
      "Kenya",      376L,         30L,  "Africa",
  "Argentina",      374L,         38L, "America",
    "Ecuador",      372L,         47L, "America",
  "Venezuela",      363L,         35L, "America",
   "Tanzania",      359L,         41L,  "Africa"
  )

```
:::

## `select()`

::: columns
::: {.column width="30%"}
#### Subset variables

-   by name\
-   by position\
-   by type\
:::

::: {.column width="70%"}
:::{.med-code}
```{r}
mcountries %>% 
  select(cntry,
         threatened) %>% 
  head(4)
```
:::
:::
:::

## `mutate()`

::: columns
::: {.column width="35%"}
#### Create and modify columns

-   create new\
-   overwrite\
:::

::: {.column width="65%"}
```{r}

mcountries %>%
  select(cntry, threatened) %>% 
  mutate(logthreat = log(threatened)) %>% 
  head(5)
```
:::
:::

We can control where the new column will appear with `.before` and `.after`

## `filter()`


#### Subset rows

Keep only the rows that meet a condition

:::{.med-code}
```{r}
mcountries %>% 
  select(cntry, species, threatened) %>% 
  filter(threatened > 75)
```
:::

## `rename()`


#### Modify column names

New name first  _then_ target column

:::{.med-code}
```{r}
mcountries %>% 
  rename(pais=cntry,
         especies=species,
         amenazadas=threatened) %>% 
  head(3)

```
:::

## `relocate()`


#### Move variables to new locations

Use `.before` or `.after` to define placement

:::{.med-code}
```{r}
mcountries %>% 
  relocate(region, .after=cntry) %>% 
  head(3)

```
:::

_`.after` can also refer to positions_

## Exporting tables

:::{.med-code}
```{r}
relocatedAf <- 
 mcountries %>% 
  relocate(region, .after=cntry) %>% 
  filter(region=="Africa")
```
:::

Export with a `write` function, providing an object and a file path e.g., `write.csv(relocatedAf,"Africa.csv")`

# Wrangling `NA` values

## 

```{r unis}
#| echo: false 
#| eval: true

universities <- 
  tibble::tribble(
        ~ID,                          ~Institution, ~year,    ~ZIP.code, ~Highest.degree.offered, ~County.name, ~Religious.affiliation,
         NA,                                    NA,    NA,           NA,                      NA,           NA,                     NA,
    100663L, "University of Alabama at Birmingham",    NA, "35294-0110",       "Doctor's degree",           NA,       "Not applicable",
    100690L,                  "Amridge University",    NA, NA,       "Doctor's degree",           NA,   "Churches of Christ",
    100706L, "University of Alabama in Huntsville",    NA,      "35899",       "Doctor's degree",           NA,       "Not applicable",
         NA,                                    NA,    NA,           NA,                      NA,           NA,                     NA,
    100751L,           "The University of Alabama",    NA, "35487-0166",       "Doctor's degree",           NA,       "Not applicable",
         NA,                                    NA,    NA,           NA,                      NA,           NA,                     NA,
         NA,                                    NA,    NA,           NA,                      NA,           NA,                     NA,
    101541L,                      "Judson College",    NA,      "36756",     "Bachelor's degree",           NA,              NA,
    101587L,          "University of West Alabama",    NA,      "35470",       "Master's degree",           NA,       "Not applicable",
         NA,                                    NA,    NA,           NA,                      NA,           NA,                     NA,
    101693L,                "University of Mobile",    NA, "36613-2842",       "Master's degree",           NA,     "Southern Baptist"
    )


```

::: panel-tabset
###  Universities

```{r}
#| echo: false 
#| eval: true
universities %>% gt() %>% 
  tab_style(
    cell_text(size = '14px'),
    locations = list(cells_body(),
                     cells_column_labels(everything()),
                     cells_title()))
```

### Data

```{r}
#| eval: false

universities <- 
  tibble::tribble(
        ~ID,                          ~Institution, ~year,    ~ZIP.code, ~Highest.degree.offered, ~County.name, ~Religious.affiliation,
         NA,                                    NA,    NA,           NA,                      NA,           NA,                     NA,
    100663L, "University of Alabama at Birmingham",    NA, "35294-0110",       "Doctor's degree",           NA,       "Not applicable",
    100690L,                  "Amridge University",    NA, NA,       "Doctor's degree",           NA,   "Churches of Christ",
    100706L, "University of Alabama in Huntsville",    NA,      "35899",       "Doctor's degree",           NA,       "Not applicable",
         NA,                                    NA,    NA,           NA,                      NA,           NA,                     NA,
    100751L,           "The University of Alabama",    NA, "35487-0166",       "Doctor's degree",           NA,       "Not applicable",
         NA,                                    NA,    NA,           NA,                      NA,           NA,                     NA,
         NA,                                    NA,    NA,           NA,                      NA,           NA,                     NA,
    101541L,                      "Judson College",    NA,      "36756",     "Bachelor's degree",           NA,              NA,
    101587L,          "University of West Alabama",    NA,      "35470",       "Master's degree",           NA,       "Not applicable",
         NA,                                    NA,    NA,           NA,                      NA,           NA,                     NA,
    101693L,                "University of Mobile",    NA, "36613-2842",       "Master's degree",           NA,     "Southern Baptist"
    )

```

:::


## Useful functions and packages for missing data

:::{.med-code}

```{r}
#| eval: false
#| echo: true

library(janitor)
library(naniar) # useful but not used in today's session
```

:::


## Remove empty rows or columns

Remove rows or columns with all `NA`

```{r}
library(janitor)
universities %>% 
  remove_empty(c("rows","cols"))
```

## Filtering rows with missing data

Find rows in column that are NA

```{r}
universities %>% filter(is.na(ZIP.code))
```

## Filtering rows with missing data

Negate condition and discard NAs in variable
```{r}
universities %>% filter(!is.na(ZIP.code))
```


## Replace NAs with something else

`replace_na()` from `tidyr`

```{r}
universities %>% 
  mutate(ZIP.code=
           replace_na(ZIP.code,"pending")) %>% head(4)
```

## Drop rows that include at least 1 `NA`

```{r}
universities %>% 
  remove_empty("cols") %>% 
  na.omit()
```



## Practice - Package datasets (1) {background-color="#a4c5ff"}

</br>

[`data()`]{style="color:##7b7bb4; font-weight=bold"} loads or lists available datasets in our installed packages
</br>

[`data()`]{style="color:##7b7bb4; font-weight=bold"} with no arguments shows every dataset currently available


## Practice - Package datasets (2) {background-color="#a4c5ff"}

We can also specify which package we want to examine for bundled data:

[`data(package="ggplot2")`]{style="font-size: 1.5em; text-align: center"}

[`data(package="datasets")`]{style="font-size: 1.5em; text-align: center"}

[`data(package="tidyr")`]{style="font-size: 1.5em; text-align: center"}

## Practice - Package datasets (3) {background-color="#a4c5ff"}

<br/> We can use `data()` to load a particular dataset from a package (quoted or unquoted both work)

> Load the relevant package first!

:::{.med-code}
```{r}
#| eval: false
#| echo: true

library(ggplot2)
data(economics)

```
:::
## Practice - data manipulation {background-color="#a4c5ff"}


-   Load the  `penguins` dataset from the `palmerpenguins` package

-   Create a subset of the data with only `species`, `island`, and `flipper_length_mm`

-   How many individuals have flippers \> 195 mm in length?

-   Create a new column with the flipper length in inches, place it before the column with the length in mm

# Working `across()` multiple columns

## Operating on multiple columns

[`across()`]{style="font-size: 1.5em; text-align: center"}

`filter` or `mutate` multiple columns simultaneously

-   By position (not recommended), name, or type

-   Compound selections of columns\
    (e.g. *factor columns that contain "month" in their name*)

## `across()` arguments:

[.cols]{style="color:green font-size: 1.3em"} Columns to transform

[.fns]{style="color:pink font-size: 1.3em"} Function to apply to each of the selected columns

> Expects a function, so function name and arguments can be passed separately (new preference is for anonymous functions, which we will cover later)

------------------------------------------------------------------------

<br/>

:::{.med-code}
```{r}
#| echo: true
mcountries %>% 
  mutate(across(c(species, threatened), `*`, 2)) %>% 
  head(3)
```
:::

-   `.cols` is a vector with the names of the two columns we're interested in

-   `*` is the function to apply, `2` is the function argument

## Useful column selection helpers

To specify sets of columns, there are a number of useful helper functions that we can use alongside or instead of the `across` function.

</br>

::::{.rightref}
:::{.refbox}
[dplyr selection features and helpers](https://dplyr.tidyverse.org/reference/dplyr_tidy_select.html)
:::
::::


## `everything()`

Matches all variables

:::{.med-code}
```{r}
#| eval: true
#| echo: true
mcountries %>% 
  mutate(across(everything(), as.character)) %>% 
  head(3)
```
:::

## `!`

Take the complement of a set of variables (negate a selection)

:::{.med-code}
```{r}
#| eval: true
#| echo: true
mcountries %>% 
  select(!c(region,threatened)) %>% head()
```
:::

## `where()`

Selects variables for which a predicate function returns `TRUE`

> e.g. subset or transform all numeric variables, determined by `is.numeric()`


```{r}
mcountries %>% 
  mutate(across(where(is.numeric), log2)) %>% slice(1:3)
```

## `matches()`

Match variable names with a regular expression

> e.g. drop variables with the pattern 'cn.r' in their name


```{r}
mcountries %>% 
  mutate(across(matches("cn.r"), toupper)) %>% head
```

## `:`

Select a range of consecutive variables

:::{.med-code}
```{r}
mcountries %>% 
  select(cntry:threatened) %>% head()
```
:::

## `-`

Exclude variables

(return all elements except the one preceded by the subtraction operator)

:::{.med-code}
```{r}
mcountries %>% 
  select(-region) %>% head(3)
```
:::

## No helpers, multiple variables

Square root (`sqrt()`) of `species` and `threatened`

```{r }
#| eval: true
#| echo: true
mcountries %>%  
  mutate(across(c(species, threatened), sqrt)) %>% 
  head()
```

## Square root (`sqrt()`) of all numeric variables

:::{.med-code}
```{r}
#| eval: true
#| echo: true
mcountries %>% 
  mutate(across(where(is.numeric), sqrt)) %>% 
  head()
```
:::

## We can also use selection helpers to keep/discard variables

Keep only columns of type numeric

:::{.med-code}
```{r}
#| eval: true
#| echo: true

mcountries %>% 
  select(where(is.numeric)) %>% 
  head()
```
:::

# Pivoting data

## 

::: columns
::: {.column width="50%"}
### Wide Data

Human-readable\
Easier entry\
Easier interactive editing
:::

::: {.column width="50%"}
### Long Data

Often meets Tidy Data principles\
Analysis-ready\
Maps well to plot axes and aesthetics
:::
:::

![](imgs/widelong.png){width="80%" fig-align="left"}

## Reshaping data with üì¶ `tidyr`

<br/> wide to long: `pivot_longer()`

:::{.med-code}
```{r}
#| eval: false
#| echo: true
 
pivot_longer(data, cols, names_to, values_to)
```
:::

<br/> long to wide: `pivot_wider()`

:::{.med-code}
```{r}
#| echo: true
#| eval: false
 
pivot_longer(data, cols, names_from, values_from)
```
:::

## 

```{r}
#| eval: true
#| echo: false

dining <- 
tibble::tribble(
     ~area_type, ~district, ~coffee_shops, ~fast_food, ~fish_chips,
  "Residential",   "South",            2L,         3L,          1L,
   "Commercial",   "North",           12L,         6L,          4L,
     "Suburban",   "South",            2L,         4L,          3L,
        "Rural",    "East",            0L,         2L,          0L
  )

```

::: panel-tabset
## dining options

```{r}
#| eval: true
#| echo: false

dining %>% gt() %>% 
    tab_style(
    cell_text(size = '24px'),
    locations = list(cells_body(),
                     cells_column_labels(everything()),
                     cells_title())) %>% 
  tab_options(table.background.color="#f4f4f9")
```

## Data

```{r panel-chunk-cols}
#| eval: false
#| echo: true

dining <- 
tibble::tribble(
     ~area_type, ~district, ~coffee_shops, ~fast_food, ~fish_chips,
  "Residential",   "South",            2L,         3L,          1L,
   "Commercial",   "North",           12L,         6L,          4L,
     "Suburban",   "South",            2L,         4L,          3L,
        "Rural",    "East",            0L,         2L,          0L
  )

```
:::

[Variables:]{style="font-size: 1.2em; text-align: center"}

area type, district, type of restaurant, number of restaurants

## Wide to long

```{r}
#| eval: true
#| echo: true

dining_long <- dining %>%
  pivot_longer(
    cols = c(coffee_shops, fast_food, fish_chips),
    names_to = "restaurant_type",
    values_to = "n_restaurants")
```

```{r}
#| eval: true
#| echo: false

dining_long <- dining %>%
  pivot_longer(
    cols = c(coffee_shops, fast_food, fish_chips),
    names_to = "restaurant_type",
    values_to = "n_restaurants")
```

**`cols`** Which columns have data in their names

**`names_to`** Name for the new column to be created from `cols`

**`values_to`** Name of the column to be created from the contents of the cells in **`cols`**

## 

```{r}
#| eval: false
#| echo: true

dining %>%
  pivot_longer(
    cols = c(coffee_shops, fast_food, fish_chips),
    names_to = "restaurant_type",
    values_to = "n_restaurants")
```

## 

```{r}
#| eval: true
#| echo: true
dining %>%
  pivot_longer(
    cols = c(coffee_shops, fast_food, fish_chips),
    names_to = "restaurant_type",
    values_to = "n_restaurants")
```

## Long to wide

```{r}
#| eval: false
#| echo: true

dining_long %>% 
  pivot_wider(names_from = restaurant_type, 
              values_from = n_restaurants)
```

**`names_from`** Which columns' values will be used for new *column names*

**`values_from`** Which column has the *cell values* for the new output columns


## 

:::{.med-code}
```{r}
#| eval: true
#| echo: true

dining_long %>% 
  pivot_wider(names_from = restaurant_type, 
              values_from = n_restaurants)
```
:::

## Practice - Pivoting {background-color="#a4c5ff"}

-   Load the "`gene_expression.csv`" file This table contains simulated gene expression values (arbitrary units) for five different fish measured at six time points and sampled from two tissues.

-   Pivot the data (wide to long and back to wide)


# Questions and discussion