{
  "hash": "4685e6286e6a0437429bca323d2fca4c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Programming and reproducibility\"\nauthor: Luis D. Verde Arregoitia\nformat:\n  revealjs:\n    theme: course_styles.scss\n    transition: fade\n    progress: true\n    preview-links: true\n    hide-inactive-cursor: true\n    highlight-style: printing\n    pause: true\neditor: source\nknitr:\n  opts_chunk:\n    dev: \"ragg_png\"\n    retina: 3\n    dpi: 200\nexecute:\n  freeze: auto\n  cache: true\n  echo: true\n  fig-width: 5\n  fig-height: 6\n---\n\n\n\n## Today:\n\nâ€“ Custom setups\n\nâ€“ Shortcuts and tools for increased efficiency  \n\nâ€“ Iteration and vectorization to avoid repeating ourselves  \n\nâ€“ Lists  \n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n## Customization\n\n-  IDE themes: [tmThemeEditor](https://tmtheme-editor.glitch.me/) by Allen Bargi\n\n::: {style=\"background-color: #3F3B3B; box-shadow: 10px 10px grey;  padding: 25px\"}\n\n:::{.neonText}\n> No one at the coffee shop will know you're serious unless you have a dark background\n:::\n\n::: {style=\"text-align: right\"}\n[Jared Lander]{style=\"color:#ef798a\"}  \n\nðŸ“¼ [R: Then and now](https://www.youtube.com/watch?v=gjpNEVcG1nU)\n:::\n:::\n\n-   Fonts and ligatures - ðŸ”— [Nerd Fonts](https://www.nerdfonts.com/font-downloads)\n\n-   Pane Layouts\n\n\n# Shortcuts and tools for efficient coding\n\n##\n\n\n![](imgs/remote-work-airplane-laptop.jpg)\n\n## Coding tricks\n\n[Ctrl == âŒ˜ Command , Alt == âŒ¥ Option]{style=\"font-size: 1.3em; text-align: center\"}\n\n- Multiline cursor (`ctrl`+`alt`+`up`) or (`ctrl`+`alt`+`down`)\n- dismiss with `escape` key\n\n## Shortcuts\n\n-   'pipe' (`ctrl`+`shift`+`m`)\n-   asignment operator (`alt`+`-`)\n-   drag line (`alt`+`up`) or (`alt`+`down`)\n-   run (`ctrl`+`enter`)\n-   convert to comment (`ctrl` + `shift` + `c`)\n\n::::{.rightref}\n:::{.refbox}\n[RStudio Shortcuts and Tips (2021)](https://appsilon.com/rstudio-shortcuts-and-tips/)\n:::\n:::\n\n## More shortcuts\n\n-   Shift focus\n    -   (`ctrl`+`1` through `8`)\n    -   Maximize panes (`ctrl`+`shift`+`1` through `8`)\n\n![](imgs/movingfocus.gif){width=\"48%\"}\n\n## \n\n\nSee help [?]{style=\"color: orange\"} o [F1]{style=\"color: orange\"}\n\nOpen object in viewer\n\n[`ctrl` + click]{style=\"color: orange\"}\n\n### Open working directory \n[`shell.exec(getwd())`]{style=\"color: orange\"} Windows  [`browseURL(getwd())`]{style=\"color: orange\"} Linux\n\n\n# Iteration \n\n## Performing a process repeatedly\n\nAny time we copy and paste code, and then edit, we are adding unnecessary steps that add room for errors\n\n</br>\n\n::::{.rightref}\n:::{.refbox}\nNick Holt (2017)\\\n[Function Iterations in R](https://nick-holt.github.io/2017/12/function-iterations-in-r/)\n:::\n::::\n\n## Challenge/brainstorm {background-color=\"#a4c5ff\"}\n\nLoad the `possum` dataset from the `openintro` package\n\n> How could we identify the oldest male possums for each of the two populations?\n\n_no code needed for this_\n\n## Grouped data\n\nMost data analysis and manipulations tasks can be approached using the [\"split-apply-combine\"]{style=\"color: purple\"} paradigm:\n\n-   split the data into groups\n-   apply some analysis to each group\n-   combine the results\n\n::::{.rightref}\n:::{.refbox}\nData Carpentry (2018)\\\n[Aggregating and analyzing data with dplyr](https://datacarpentry.org/R-genomics/04-dplyr.html)\n\nHadley Wickham (2011)\\\n[The split-apply-combine strategy for data analysis](https://doi.org/10.18637/jss.v040.i01)\n:::\n::::\n\n## `dplyr::group_by()`\n\n-   Define groups with one or more variables\\\n-   Stratify a data frame\n-   equivalent to `aggregate()` in base R\n\n![image by Ruben Sanchez](imgs/groupby.PNG){width=\"64%\"}\\\n\n\n## Aggregating or manipulating grouped data\n\nOnce `group_by()` creates a \"grouped\" version of a table, `dplyr` functions will manipulate each \"group\" separately and then combine the results.\n\n::::{.rightref}\n:::{.refbox}\nRStudio (2021)\\\n[Data transformation with dplyr cheatsheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-transformation.pdf)\n:::\n:::\n\n## Within groups, we can:\n\n-   summarize group values (mean, median)\n\n-   extract the first or last *n* rows from each group\n\n-   find the minimum or maximum values\n\n-   remove duplicated rows\n\n-   count records, etc.\n\n## mammal sleep data\n\nTraits for 83 species of mammals in relation to their sleeping habits. From Savage & West (2007), bundled with `ggplot2`\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"ucnjespivy\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#ucnjespivy table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#ucnjespivy thead, #ucnjespivy tbody, #ucnjespivy tfoot, #ucnjespivy tr, #ucnjespivy td, #ucnjespivy th {\n  border-style: none;\n}\n\n#ucnjespivy p {\n  margin: 0;\n  padding: 0;\n}\n\n#ucnjespivy .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#ucnjespivy .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#ucnjespivy .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#ucnjespivy .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#ucnjespivy .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#ucnjespivy .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ucnjespivy .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#ucnjespivy .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#ucnjespivy .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#ucnjespivy .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#ucnjespivy .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#ucnjespivy .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#ucnjespivy .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#ucnjespivy .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#ucnjespivy .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#ucnjespivy .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#ucnjespivy .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#ucnjespivy .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#ucnjespivy .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ucnjespivy .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#ucnjespivy .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#ucnjespivy .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#ucnjespivy .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ucnjespivy .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#ucnjespivy .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#ucnjespivy .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ucnjespivy .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ucnjespivy .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#ucnjespivy .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ucnjespivy .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#ucnjespivy .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ucnjespivy .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#ucnjespivy .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ucnjespivy .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#ucnjespivy .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ucnjespivy .gt_left {\n  text-align: left;\n}\n\n#ucnjespivy .gt_center {\n  text-align: center;\n}\n\n#ucnjespivy .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#ucnjespivy .gt_font_normal {\n  font-weight: normal;\n}\n\n#ucnjespivy .gt_font_bold {\n  font-weight: bold;\n}\n\n#ucnjespivy .gt_font_italic {\n  font-style: italic;\n}\n\n#ucnjespivy .gt_super {\n  font-size: 65%;\n}\n\n#ucnjespivy .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#ucnjespivy .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#ucnjespivy .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#ucnjespivy .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#ucnjespivy .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#ucnjespivy .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#ucnjespivy .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" style=\"font-size: 20px;\" scope=\"col\" id=\"name\">name</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" style=\"font-size: 20px;\" scope=\"col\" id=\"genus\">genus</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" style=\"font-size: 20px;\" scope=\"col\" id=\"vore\">vore</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" style=\"font-size: 20px;\" scope=\"col\" id=\"order\">order</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" style=\"font-size: 20px;\" scope=\"col\" id=\"conservation\">conservation</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" style=\"font-size: 20px;\" scope=\"col\" id=\"sleep_total\">sleep_total</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" style=\"font-size: 20px;\" scope=\"col\" id=\"sleep_rem\">sleep_rem</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" style=\"font-size: 20px;\" scope=\"col\" id=\"sleep_cycle\">sleep_cycle</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" style=\"font-size: 20px;\" scope=\"col\" id=\"awake\">awake</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" style=\"font-size: 20px;\" scope=\"col\" id=\"brainwt\">brainwt</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" style=\"font-size: 20px;\" scope=\"col\" id=\"bodywt\">bodywt</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"name\" class=\"gt_row gt_left\" style=\"font-size: 20px;\">Cheetah</td>\n<td headers=\"genus\" class=\"gt_row gt_left\" style=\"font-size: 20px;\">Acinonyx</td>\n<td headers=\"vore\" class=\"gt_row gt_left\" style=\"font-size: 20px;\">carni</td>\n<td headers=\"order\" class=\"gt_row gt_left\" style=\"font-size: 20px;\">Carnivora</td>\n<td headers=\"conservation\" class=\"gt_row gt_left\" style=\"font-size: 20px;\">lc</td>\n<td headers=\"sleep_total\" class=\"gt_row gt_right\" style=\"font-size: 20px;\">12.1</td>\n<td headers=\"sleep_rem\" class=\"gt_row gt_right\" style=\"font-size: 20px;\">NA</td>\n<td headers=\"sleep_cycle\" class=\"gt_row gt_right\" style=\"font-size: 20px;\">NA</td>\n<td headers=\"awake\" class=\"gt_row gt_right\" style=\"font-size: 20px;\">11.9</td>\n<td headers=\"brainwt\" class=\"gt_row gt_right\" style=\"font-size: 20px;\">NA</td>\n<td headers=\"bodywt\" class=\"gt_row gt_right\" style=\"font-size: 20px;\">50.000</td></tr>\n    <tr><td headers=\"name\" class=\"gt_row gt_left\" style=\"font-size: 20px;\">Owl monkey</td>\n<td headers=\"genus\" class=\"gt_row gt_left\" style=\"font-size: 20px;\">Aotus</td>\n<td headers=\"vore\" class=\"gt_row gt_left\" style=\"font-size: 20px;\">omni</td>\n<td headers=\"order\" class=\"gt_row gt_left\" style=\"font-size: 20px;\">Primates</td>\n<td headers=\"conservation\" class=\"gt_row gt_left\" style=\"font-size: 20px;\">NA</td>\n<td headers=\"sleep_total\" class=\"gt_row gt_right\" style=\"font-size: 20px;\">17.0</td>\n<td headers=\"sleep_rem\" class=\"gt_row gt_right\" style=\"font-size: 20px;\">1.8</td>\n<td headers=\"sleep_cycle\" class=\"gt_row gt_right\" style=\"font-size: 20px;\">NA</td>\n<td headers=\"awake\" class=\"gt_row gt_right\" style=\"font-size: 20px;\">7.0</td>\n<td headers=\"brainwt\" class=\"gt_row gt_right\" style=\"font-size: 20px;\">0.01550</td>\n<td headers=\"bodywt\" class=\"gt_row gt_right\" style=\"font-size: 20px;\">0.480</td></tr>\n    <tr><td headers=\"name\" class=\"gt_row gt_left\" style=\"font-size: 20px;\">Mountain beaver</td>\n<td headers=\"genus\" class=\"gt_row gt_left\" style=\"font-size: 20px;\">Aplodontia</td>\n<td headers=\"vore\" class=\"gt_row gt_left\" style=\"font-size: 20px;\">herbi</td>\n<td headers=\"order\" class=\"gt_row gt_left\" style=\"font-size: 20px;\">Rodentia</td>\n<td headers=\"conservation\" class=\"gt_row gt_left\" style=\"font-size: 20px;\">nt</td>\n<td headers=\"sleep_total\" class=\"gt_row gt_right\" style=\"font-size: 20px;\">14.4</td>\n<td headers=\"sleep_rem\" class=\"gt_row gt_right\" style=\"font-size: 20px;\">2.4</td>\n<td headers=\"sleep_cycle\" class=\"gt_row gt_right\" style=\"font-size: 20px;\">NA</td>\n<td headers=\"awake\" class=\"gt_row gt_right\" style=\"font-size: 20px;\">9.6</td>\n<td headers=\"brainwt\" class=\"gt_row gt_right\" style=\"font-size: 20px;\">NA</td>\n<td headers=\"bodywt\" class=\"gt_row gt_right\" style=\"font-size: 20px;\">1.350</td></tr>\n    <tr><td headers=\"name\" class=\"gt_row gt_left\" style=\"font-size: 20px;\">Greater short-tailed shrew</td>\n<td headers=\"genus\" class=\"gt_row gt_left\" style=\"font-size: 20px;\">Blarina</td>\n<td headers=\"vore\" class=\"gt_row gt_left\" style=\"font-size: 20px;\">omni</td>\n<td headers=\"order\" class=\"gt_row gt_left\" style=\"font-size: 20px;\">Soricomorpha</td>\n<td headers=\"conservation\" class=\"gt_row gt_left\" style=\"font-size: 20px;\">lc</td>\n<td headers=\"sleep_total\" class=\"gt_row gt_right\" style=\"font-size: 20px;\">14.9</td>\n<td headers=\"sleep_rem\" class=\"gt_row gt_right\" style=\"font-size: 20px;\">2.3</td>\n<td headers=\"sleep_cycle\" class=\"gt_row gt_right\" style=\"font-size: 20px;\">0.1333333</td>\n<td headers=\"awake\" class=\"gt_row gt_right\" style=\"font-size: 20px;\">9.1</td>\n<td headers=\"brainwt\" class=\"gt_row gt_right\" style=\"font-size: 20px;\">0.00029</td>\n<td headers=\"bodywt\" class=\"gt_row gt_right\" style=\"font-size: 20px;\">0.019</td></tr>\n    <tr><td headers=\"name\" class=\"gt_row gt_left\" style=\"font-size: 20px;\">Cow</td>\n<td headers=\"genus\" class=\"gt_row gt_left\" style=\"font-size: 20px;\">Bos</td>\n<td headers=\"vore\" class=\"gt_row gt_left\" style=\"font-size: 20px;\">herbi</td>\n<td headers=\"order\" class=\"gt_row gt_left\" style=\"font-size: 20px;\">Artiodactyla</td>\n<td headers=\"conservation\" class=\"gt_row gt_left\" style=\"font-size: 20px;\">domesticated</td>\n<td headers=\"sleep_total\" class=\"gt_row gt_right\" style=\"font-size: 20px;\">4.0</td>\n<td headers=\"sleep_rem\" class=\"gt_row gt_right\" style=\"font-size: 20px;\">0.7</td>\n<td headers=\"sleep_cycle\" class=\"gt_row gt_right\" style=\"font-size: 20px;\">0.6666667</td>\n<td headers=\"awake\" class=\"gt_row gt_right\" style=\"font-size: 20px;\">20.0</td>\n<td headers=\"brainwt\" class=\"gt_row gt_right\" style=\"font-size: 20px;\">0.42300</td>\n<td headers=\"bodywt\" class=\"gt_row gt_right\" style=\"font-size: 20px;\">600.000</td></tr>\n    <tr><td headers=\"name\" class=\"gt_row gt_left\" style=\"font-size: 20px;\">Three-toed sloth</td>\n<td headers=\"genus\" class=\"gt_row gt_left\" style=\"font-size: 20px;\">Bradypus</td>\n<td headers=\"vore\" class=\"gt_row gt_left\" style=\"font-size: 20px;\">herbi</td>\n<td headers=\"order\" class=\"gt_row gt_left\" style=\"font-size: 20px;\">Pilosa</td>\n<td headers=\"conservation\" class=\"gt_row gt_left\" style=\"font-size: 20px;\">NA</td>\n<td headers=\"sleep_total\" class=\"gt_row gt_right\" style=\"font-size: 20px;\">14.4</td>\n<td headers=\"sleep_rem\" class=\"gt_row gt_right\" style=\"font-size: 20px;\">2.2</td>\n<td headers=\"sleep_cycle\" class=\"gt_row gt_right\" style=\"font-size: 20px;\">0.7666667</td>\n<td headers=\"awake\" class=\"gt_row gt_right\" style=\"font-size: 20px;\">9.6</td>\n<td headers=\"brainwt\" class=\"gt_row gt_right\" style=\"font-size: 20px;\">NA</td>\n<td headers=\"bodywt\" class=\"gt_row gt_right\" style=\"font-size: 20px;\">3.850</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n\n\n\n## maximum `brainwt` for each order\n\n\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nmsleep %>% group_by(order) %>% \n  slice_max(brainwt,n=1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 21 Ã— 11\n# Groups:   order [19]\n   name   genus vore  order conservation sleep_total sleep_rem sleep_cycle awake\n   <chr>  <chr> <chr> <chr> <chr>              <dbl>     <dbl>       <dbl> <dbl>\n 1 Tenrec Tenrâ€¦ omni  Afroâ€¦ <NA>                15.6       2.3      NA       8.4\n 2 Cow    Bos   herbi Artiâ€¦ domesticated         4         0.7       0.667  20  \n 3 Gray â€¦ Haliâ€¦ carni Carnâ€¦ lc                   6.2       1.5      NA      17.8\n 4 Pilotâ€¦ Globâ€¦ carni Cetaâ€¦ cd                   2.7       0.1      NA      21.4\n 5 Commoâ€¦ Phocâ€¦ carni Cetaâ€¦ vu                   5.6      NA        NA      18.4\n 6 Bottlâ€¦ Tursâ€¦ carni Cetaâ€¦ <NA>                 5.2      NA        NA      18.8\n 7 Big bâ€¦ Epteâ€¦ inseâ€¦ Chirâ€¦ lc                  19.7       3.9       0.117   4.3\n 8 Giantâ€¦ Prioâ€¦ inseâ€¦ Cingâ€¦ en                  18.1       6.1      NA       5.9\n 9 Northâ€¦ Dideâ€¦ omni  Dideâ€¦ lc                  18         4.9       0.333   6  \n10 Phalaâ€¦ Phalâ€¦ <NA>  Diprâ€¦ <NA>                13.7       1.8      NA      10.3\n# â„¹ 11 more rows\n# â„¹ 2 more variables: brainwt <dbl>, bodywt <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n## One row sampled randomly from each order\n\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nmsleep %>% group_by(order) %>% \n  slice_sample(n=1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 19 Ã— 11\n# Groups:   order [19]\n   name   genus vore  order conservation sleep_total sleep_rem sleep_cycle awake\n   <chr>  <chr> <chr> <chr> <chr>              <dbl>     <dbl>       <dbl> <dbl>\n 1 \"Tenrâ€¦ Tenrâ€¦ omni  Afroâ€¦ <NA>                15.6       2.3      NA       8.4\n 2 \"Cow\"  Bos   herbi Artiâ€¦ domesticated         4         0.7       0.667  20  \n 3 \"Cheeâ€¦ Acinâ€¦ carni Carnâ€¦ lc                  12.1      NA        NA      11.9\n 4 \"Piloâ€¦ Globâ€¦ carni Cetaâ€¦ cd                   2.7       0.1      NA      21.4\n 5 \"Littâ€¦ Myotâ€¦ inseâ€¦ Chirâ€¦ <NA>                19.9       2         0.2     4.1\n 6 \"Gianâ€¦ Prioâ€¦ inseâ€¦ Cingâ€¦ en                  18.1       6.1      NA       5.9\n 7 \"Nortâ€¦ Dideâ€¦ omni  Dideâ€¦ lc                  18         4.9       0.333   6  \n 8 \"Potoâ€¦ Potoâ€¦ herbi Diprâ€¦ <NA>                11.1       1.5      NA      12.9\n 9 \"Deseâ€¦ Paraâ€¦ <NA>  Erinâ€¦ lc                  10.3       2.7      NA      13.7\n10 \"Rockâ€¦ Procâ€¦ <NA>  Hyraâ€¦ lc                   5.4       0.5      NA      18.6\n11 \"Rabbâ€¦ Orycâ€¦ herbi Lagoâ€¦ domesticated         8.4       0.9       0.417  15.6\n12 \"Shorâ€¦ Tachâ€¦ inseâ€¦ Monoâ€¦ <NA>                 8.6      NA        NA      15.4\n13 \"Horsâ€¦ Equus herbi Periâ€¦ domesticated         2.9       0.6       1      21.1\n14 \"Threâ€¦ Bradâ€¦ herbi Piloâ€¦ <NA>                14.4       2.2       0.767   9.6\n15 \"Baboâ€¦ Papio omni  Primâ€¦ <NA>                 9.4       1         0.667  14.6\n16 \"Afriâ€¦ Loxoâ€¦ herbi Probâ€¦ vu                   3.3      NA        NA      20.7\n17 \"Voleâ€¦ Micrâ€¦ herbi Rodeâ€¦ <NA>                12.8      NA        NA      11.2\n18 \"Treeâ€¦ Tupaâ€¦ omni  Scanâ€¦ <NA>                 8.9       2.6       0.233  15.1\n19 \"Lessâ€¦ Crypâ€¦ omni  Soriâ€¦ lc                   9.1       1.4       0.15   14.9\n# â„¹ 2 more variables: brainwt <dbl>, bodywt <dbl>\n```\n\n\n:::\n:::\n\n\n\n## summarize values\n:::{.med-code}\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nmsleep %>% group_by(order) %>% \n  summarize(median_slp = median(sleep_total),\n            mean_brainwt=mean(brainwt))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 19 Ã— 3\n   order           median_slp mean_brainwt\n   <chr>                <dbl>        <dbl>\n 1 Afrosoricida          15.6     0.0026  \n 2 Artiodactyla           3.9    NA       \n 3 Carnivora             10.2    NA       \n 4 Cetacea                5.2    NA       \n 5 Chiroptera            19.8     0.000275\n 6 Cingulata             17.8     0.0459  \n 7 Didelphimorphia       18.7    NA       \n 8 Diprotodontia         12.4    NA       \n 9 Erinaceomorpha        10.2     0.00295 \n10 Hyracoidea             5.4     0.0152  \n11 Lagomorpha             8.4     0.0121  \n12 Monotremata            8.6     0.025   \n13 Perissodactyla         3.1     0.414   \n14 Pilosa                14.4    NA       \n15 Primates               9.9    NA       \n16 Proboscidea            3.6     5.16    \n17 Rodentia              12.9    NA       \n18 Scandentia             8.9     0.0025  \n19 Soricomorpha          10.3     0.000592\n```\n\n\n:::\n:::\n\n\n:::\n\n## New notation\n\nEliminate the need for `group_by()` and then `ungroup()` with `by`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsleep %>% slice_sample(n=1,by=order)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 19 Ã— 11\n   name   genus vore  order conservation sleep_total sleep_rem sleep_cycle awake\n   <chr>  <chr> <chr> <chr> <chr>              <dbl>     <dbl>       <dbl> <dbl>\n 1 Domesâ€¦ Felis carni Carnâ€¦ domesticated        12.5       3.2       0.417  11.5\n 2 Patasâ€¦ Erytâ€¦ omni  Primâ€¦ lc                  10.9       1.1      NA      13.1\n 3 Vespeâ€¦ Caloâ€¦ <NA>  Rodeâ€¦ <NA>                 7        NA        NA      17  \n 4 Star-â€¦ Condâ€¦ omni  Soriâ€¦ lc                  10.3       2.2      NA      13.7\n 5 Pig    Sus   omni  Artiâ€¦ domesticated         9.1       2.4       0.5    14.9\n 6 Threeâ€¦ Bradâ€¦ herbi Piloâ€¦ <NA>                14.4       2.2       0.767   9.6\n 7 Giantâ€¦ Prioâ€¦ inseâ€¦ Cingâ€¦ en                  18.1       6.1      NA       5.9\n 8 Tree â€¦ Dendâ€¦ herbi Hyraâ€¦ lc                   5.3       0.5      NA      18.7\n 9 Thickâ€¦ Lutrâ€¦ carni Dideâ€¦ lc                  19.4       6.6      NA       4.6\n10 Africâ€¦ Loxoâ€¦ herbi Probâ€¦ vu                   3.3      NA        NA      20.7\n11 Big bâ€¦ Epteâ€¦ inseâ€¦ Chirâ€¦ lc                  19.7       3.9       0.117   4.3\n12 Horse  Equus herbi Periâ€¦ domesticated         2.9       0.6       1      21.1\n13 Deserâ€¦ Paraâ€¦ <NA>  Erinâ€¦ lc                  10.3       2.7      NA      13.7\n14 Commoâ€¦ Phocâ€¦ carni Cetaâ€¦ vu                   5.6      NA        NA      18.4\n15 Rabbit Orycâ€¦ herbi Lagoâ€¦ domesticated         8.4       0.9       0.417  15.6\n16 Potorâ€¦ Potoâ€¦ herbi Diprâ€¦ <NA>                11.1       1.5      NA      12.9\n17 Shortâ€¦ Tachâ€¦ inseâ€¦ Monoâ€¦ <NA>                 8.6      NA        NA      15.4\n18 Tenrec Tenrâ€¦ omni  Afroâ€¦ <NA>                15.6       2.3      NA       8.4\n19 Tree â€¦ Tupaâ€¦ omni  Scanâ€¦ <NA>                 8.9       2.6       0.233  15.1\n# â„¹ 2 more variables: brainwt <dbl>, bodywt <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n## Loops (_for loops_)\n\n- Still useful \n- most of the time we do not have to write them ourselves \n\n::: columns\n::: {.column width=\"40%\"}\n![](imgs/Homer.png)\n:::\n\n::: {.column width=\"60%\"}\n::::{.rightref}\n:::{.refbox}\nJenny Bryan\\\n[purrr tutorial](https://jennybc.github.io/purrr-tutorial/index.html)\\\n[Data Rectangling](https://speakerdeck.com/jennybc/data-rectangling)\\\n[purrr workshop](https://speakerdeck.com/jennybc/purrr-workshop)\n:::\n:::\n\n:::\n:::\n\n\n\n## Loops\n\n::: columns\n::: {.column width=\"58%\"}\n\n:::{.med-code}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (value in sequence){\n   statement(s)\n}\n```\n:::\n\n\n:::\n\nExecute a set of *statements*, once for each item in a vector, array, list, etc. and stop when the last element is reached.\n\n:::\n\n::: {.column width=\"42%\"}\n:::{.med-code}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (x in 1:7){\n  print(x)\n} \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\n```\n\n\n:::\n:::\n\n\n:::\n:::\n:::\n\n## Practice {background-color=\"#a4c5ff\"}\n\nWrite a for loop to print every letter in the alphabet in lowercase and in reverse alphabetical order (e.g. z,y,x,w...) </br>\n\n**Hints:**\n\n-   What is the length of the built-in `letters` vector?\n-   Which function \"prints\" text to the console?\n\n\n## Loops and groups\n\n:::{.med-code}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsleep %>% \n  group_by(order) %>% # for each order\n  slice_sample(1) # statement to execute \n```\n:::\n\n\n:::\n\nEverything happens within the data frame\n\n## Vectorization is our friend\n\nOperations occur in parallel on all elements, rather than on individual components in sequence\n\n#### What will be the result here?\n\n:::{.big-code}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(1,3,12,4,7,8)\nx > 5\n```\n:::\n\n\n:::\n\n\n## Logical operators are vectorized (many other fns too!)\n\n:::{.med-code}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(1,3,12,4,7,8)\nx > 5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE FALSE  TRUE FALSE  TRUE  TRUE\n```\n\n\n:::\n:::\n\n\n:::\n\nWe don't need to compare each element \n\n\n\n\n------------------------------------------------------------------------\n\n![American Greetings](imgs/dogscopy.jpg){width=\"36%\" fig-align=\"center\"}\n\n# Functions\n\n## Functions make things happen in R\n\n- Functions have arguments and always return something\n- Operators such as `+`, `*`, and even `<-` are functions\n\n\n## Why write our own functions\n\n-   Avoids repetition\n\n-   Brevity\n\n-   Less room for errors\n\n-   Take advantage of tools that help us apply functions to many things at once\n\n\n## Functions\n\n![](imgs/r-function-syntax.png)\n\n\n## Function Definition\n\nThe '`function()`' function\n\n`function( arglist ) expr`{style=\"font-size: 1.5em; text-align: center; font-family: monospace; font-weight: bold\"}\n\n</br>\n\n**arguments** (`arglist`): values passed to the function\n\n**expression** `(expr)`: an object that represents an action that can be performed by R. \n\n:::{.callout-note}\n##\nExpressions contain one or more statements\n:::\n\n## Defining a function\n\n:::{.med-code}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_custom_function <- function(my_arg){\n  my_arg+1 # statement\n}\n\nmy_vector <- c(3,5,6,7)\n\nmy_custom_function(my_arg = my_vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4 6 7 8\n```\n\n\n:::\n:::\n\n\n:::\n\n##\n\nThe body of the function --the statements that are executed when it runs-- is grouped with curly braces (`{}`)\n\n:::{.med-code}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyfun <- function(x) {\n  x + 4 # statement\n}\n```\n:::\n\n\n:::\n\n## \n\n:::{.big-code}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- function(x) {mean(x)/2}   \nf(c(6,43,12,5,7))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7.3\n```\n\n\n:::\n:::\n\n\n:::\n\n## Function with two statements\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- function(x) {\n  y <- (x*0.2885) # this is a statement\n  log(y)          # this is another statement\n}\n\nf(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.3663777\n```\n\n\n:::\n:::\n\n\n\n\n::::{.rightref}\n:::{.refbox}\nJenny Bryan - Stat545\\\n[Write your own R functions](https://stat545.com/functions-part1.html)\n:::\n:::\n\n## Anonymous functions\n\n**Functions on the go** (created and used but never given a name)\n\n### Anonymous function syntax\n\n:::{.big-code}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(function(x) x * x + 3)(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 103\n```\n\n\n:::\n:::\n\n\n:::\n\n> we use parentheses to separate function and arguments\n\n\n\n------------------------------------------------------------------------\n\n:::{.big-code}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(function(x) x + 3)(10)\n```\n:::\n\n\n:::\n\nBehaves exactly the same as\n\n:::{.big-code}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- function(x) {x + 3}\nf(10)\n```\n:::\n\n\n:::\n\n## Shorthand notation (since R v4.1.0)\n\nReplaces \"`function(x) {}`\" with \"`\\(x){}`\"\n\n:::{.big-code}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(\\(x) x + 3)(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 13\n```\n\n\n:::\n\n```{.r .cell-code}\n(\\(x) x / 2)(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n:::\n\n\n:::\n\n\n::::{.rightref}\n:::{.refbox}\nRuss Hyde (2021)\\\n[New features in R 4.1.0](https://www.jumpingrivers.com/blog/new-features-r410-pipe-anonymous-functions/)\n:::\n:::\n\n:::{.callout-note}\n## \n`tidyverse` devlopers and R users in general are gradually shifting to this notation\n:::\n\n\n## Anonymous functions\n\n-   Handy when we want to apply a user-defined operation to many things at once\n\n-   Also known as *lambda expressions*\n\n-   Self-contained\n\n-   Comparable with similar approaches in Python\n\n## `across()` and anonymous fns\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>%\n  mutate(across(c(height,mass),\\(x) x/7+2))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 87 Ã— 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   <chr>     <dbl> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n 1 Luke Skâ€¦   26.6 13    blond      fair       blue            19   male  mascuâ€¦\n 2 C-3PO      25.9 12.7  <NA>       gold       yellow         112   none  mascuâ€¦\n 3 R2-D2      15.7  6.57 <NA>       white, blâ€¦ red             33   none  mascuâ€¦\n 4 Darth Vâ€¦   30.9 21.4  none       white      yellow          41.9 male  mascuâ€¦\n 5 Leia Orâ€¦   23.4  9    brown      light      brown           19   femaâ€¦ feminâ€¦\n 6 Owen Laâ€¦   27.4 19.1  brown, grâ€¦ light      blue            52   male  mascuâ€¦\n 7 Beru Whâ€¦   25.6 12.7  brown      light      blue            47   femaâ€¦ feminâ€¦\n 8 R5-D4      15.9  6.57 <NA>       white, red red             NA   none  mascuâ€¦\n 9 Biggs Dâ€¦   28.1 14    black      light      brown           24   male  mascuâ€¦\n10 Obi-Wanâ€¦   28   13    auburn, wâ€¦ fair       blue-gray       57   male  mascuâ€¦\n# â„¹ 77 more rows\n# â„¹ 5 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>\n```\n\n\n:::\n:::\n\n\n\n\n# Lists\n\n## Lists \n\nObjects which contain elements of different types, such as numbers, strings, vectors, data frames, or even other lists\n\n\n:::{.med-code}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_list <- list(\n  a_number = 7,\n  a_vector = c(\"mouse\", \"cat\", \"dog\"),\n  a_dataframe = data.frame(\n    a = 1:3, b = c(\"K\", \"L\", \"M\")))\n```\n:::\n\n\n:::\n\n::::{.rightref}\n:::{.refbox}\nRebecca Barter (2019)\\\n[Learn to purrr](https://www.rebeccabarter.com/blog/2019-08-19_purrr/)\n:::\n:::\n\n------------------------------------------------------------------------\n\n:::{.med-code}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_list\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$a_number\n[1] 7\n\n$a_vector\n[1] \"mouse\" \"cat\"   \"dog\"  \n\n$a_dataframe\n  a b\n1 1 K\n2 2 L\n3 3 M\n```\n\n\n:::\n:::\n\n\n:::\n\n\n## \n\nWe can also create lists by splitting other objects\n\nGroup and split with `dplyr` into a list of data frames, one for each group\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nguilds <- \n  msleep %>% group_by(vore) %>%\n  group_split()\n```\n:::\n\n\n\n\n## \n\n`group_keys()` retrieves the grouping data\n\n:::{.med-code}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsleep %>% group_by(vore) %>%\n  group_keys()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 Ã— 1\n  vore   \n  <chr>  \n1 carni  \n2 herbi  \n3 insecti\n4 omni   \n5 <NA>   \n```\n\n\n:::\n:::\n\n\n:::\n\n## List indexing\n\n![](imgs/listspepper.png){width=\"76%\"}\n\n## Working with list elements\n\nFirst element in our list (`[[1]]`)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nguilds[[1]] %>% \n  select(name,genus) %>% head\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 2\n  name                 genus        \n  <chr>                <chr>        \n1 Cheetah              Acinonyx     \n2 Northern fur seal    Callorhinus  \n3 Dog                  Canis        \n4 Long-nosed armadillo Dasypus      \n5 Domestic cat         Felis        \n6 Pilot whale          Globicephalus\n```\n\n\n:::\n:::\n\n\n\n\n## Second element\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nguilds[[2]] %>% \n  select(name,genus, vore, conservation) %>% \n  head\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 4\n  name             genus      vore  conservation\n  <chr>            <chr>      <chr> <chr>       \n1 Mountain beaver  Aplodontia herbi nt          \n2 Cow              Bos        herbi domesticated\n3 Three-toed sloth Bradypus   herbi <NA>        \n4 Roe deer         Capreolus  herbi lc          \n5 Goat             Capri      herbi lc          \n6 Guinea pig       Cavis      herbi domesticated\n```\n\n\n:::\n:::\n\n\n\n##\n\n![](imgs/purrrPost.png)\n\n\n::: {style=\"text-align: right\"}\nLuis (2017)\\\n[Export Iteratively](https://luisdva.github.io/rstats/export-iteratively/)\n:::\n\n## Why lists?\n\n-   Flexible, can store many kinds of objects\n\n-   We can easily create lists by splitting existing objects\n\n-   List elements can be named\n\n## For efficient iteration\n\n::: columns\n::: {.column width=\"25%\"}\n![](imgs/purrr.jpeg)\n:::\n\n::: {.column width=\"70%\"}\nðŸ“¦ **`purrr`** - Functional programming tools\n\n-   map functions to data\\\n-   work efficiently with **lists**\n-   readable code\n:::\n:::\n\n::::{.rightref}\n:::{.refbox}\nThomas Mock (2018)\\\n[Functional Programming in R with purrr](https://towardsdatascience.com/functional-programming-in-r-with-purrr-469e597d0229)\n:::\n:::\n\n##\n::: {style=\"text-align: center\"}\n[map(]{style=\"color:blue; font-family: monospace; font-weight: bold\"}[.x]{style=\"color: red; font-family: Liberation Mono; font-weight: bold\"}, [.f]{style=\"color: green; font-family: Liberation Mono; font-weight: bold\"}[, ...)]{style=\"color:blue; font-family: Liberation Mono; font-weight: bold\"}\n\nfor every element of [.x]{style=\"color: red; font-family: Liberation Mono; font-weight: bold\"}\n\napply [.f]{style=\"color: green; font-family: Liberation Mono; font-weight: bold\"}\n\n`...` arguments for [.f]{style=\"color: green; font-family: Liberation Mono; font-weight: bold\"}\n:::\n\n\n## Mapping functions to data\n\n`map(.x,`[.f]{style=\"color: green; font-family: monospace; font-weight: bold\"}`)`\n\nWe can specify [.f]{style=\"color: green; font-family: monospace; font-weight: bold\"} as:\n\n:::{.incremental}\n\n-   an existing function\n\n-   an anonymous function\n\n:::\n\n\n\n## Mapping functions to data\n\n-   Apply functions to many things at once\n\n-   Reading many files at once\n\n-   Modifying and exporting multiple objects\n\n## Apply functions to many things at once\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\nlibrary(purrr)\n# numeric vectors\nmass <- penguins$body_mass_g\nbill <- penguins$bill_length_mm\nflipper <- penguins$flipper_length_mm\n# together in a list\ntraits <- list(mass, bill , flipper)\n# apply \"mean\" to each list element\nmap(traits,mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] NA\n\n[[2]]\n[1] NA\n\n[[3]]\n[1] NA\n```\n\n\n:::\n:::\n\n\n\n## \n\n### additional arguments\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# \"mean\" of each list element\nmap(traits,mean,na.rm=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 4201.754\n\n[[2]]\n[1] 43.92193\n\n[[3]]\n[1] 200.9152\n```\n\n\n:::\n:::\n\n\n\n## Apply custom functions \n\n:::{.med-code}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# min, max, and range\nMMR <- function(x){\n  min_x <- min(x,na.rm = TRUE)\n  max_x <- max(x,na.rm = TRUE)\n  maxmin <- max_x - min_x\n  c(min_x, max_x, maxmin)\n}\n```\n:::\n\n\n:::\n\n## Try out with vectors\n\n:::{.med-code}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMMR(mass)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2700 6300 3600\n```\n\n\n:::\n\n```{.r .cell-code}\nMMR(flipper)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 172 231  59\n```\n\n\n:::\n:::\n\n\n:::\n\n## `map()` our function to a list\n\n\n:::{.med-code}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap(.x = traits, .f = MMR)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 2700 6300 3600\n\n[[2]]\n[1] 32.1 59.6 27.5\n\n[[3]]\n[1] 172 231  59\n```\n\n\n:::\n:::\n\n\n:::\n\n## `map()` with anonymous functions\n\nSame behavior\n\n:::{.med-code}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist_of_numbers <- list(c(5:10),c(20:27))\n# anonymous fn\nmap(list_of_numbers, function(x) x+2)\n\n# shorthand notation\nmap(list_of_numbers,\\(x) x+2)\n```\n:::\n\n\n:::\n\n::::{.rightref}\n:::{.refbox}\nMike Cheng (2019)\\\n[Anonymous Functions in R - Part 1](https://coolbutuseless.github.io/2019/03/13/anonymous-functions-in-r-part-1/)\n:::\n:::\n\n\n# Done!\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}